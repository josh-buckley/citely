"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/number-flow";
exports.ids = ["vendor-chunks/number-flow"];
exports.modules = {

/***/ "(ssr)/./node_modules/number-flow/dist/index.mjs":
/*!*************************************************!*\
  !*** ./node_modules/number-flow/dist/index.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NumberFlowLite: () => (/* binding */ kt),\n/* harmony export */   canAnimate: () => (/* binding */ St),\n/* harmony export */   define: () => (/* binding */ Et),\n/* harmony export */   partitionParts: () => (/* binding */ Mt),\n/* harmony export */   prefersReducedMotion: () => (/* binding */ Q),\n/* harmony export */   render: () => (/* binding */ Nt)\n/* harmony export */ });\nfunction s(a, t, e, i) {\n  if (e === \"a\" && !i) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof t == \"function\" ? a !== t || !i : !t.has(a)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return e === \"m\" ? i : e === \"a\" ? i.call(a) : i ? i.value : t.get(a);\n}\nfunction h(a, t, e, i, n) {\n  if (i === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (i === \"a\" && !n) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof t == \"function\" ? a !== t || !n : !t.has(a)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return i === \"a\" ? n.call(a, e) : n ? n.value = e : t.set(a, e), e;\n}\nconst F = typeof window < \"u\", w = (a, t, e) => {\n  const i = document.createElement(a), [n, r] = Array.isArray(t) ? [void 0, t] : [t, e];\n  return n && Object.assign(i, n), r == null || r.forEach((l) => i.appendChild(l)), i;\n}, pt = (a, t) => {\n  var e;\n  return t === \"left\" ? a.offsetLeft : (((e = a.offsetParent instanceof HTMLElement ? a.offsetParent : null) == null ? void 0 : e.offsetWidth) ?? 0) - a.offsetWidth - a.offsetLeft;\n}, ut = (a) => a.offsetWidth > 0 && a.offsetHeight > 0, Et = (a, t) => {\n  if (!(!F || customElements.get(a) === t))\n    return customElements.define(a, t);\n};\nfunction mt(a, t, { reverse: e = !1 } = {}) {\n  const i = a.length;\n  for (let n = e ? i - 1 : 0; e ? n >= 0 : n < i; e ? n-- : n++)\n    t(a[n], n);\n}\nfunction Mt(a, t) {\n  const e = t.formatToParts(a), i = [], n = [], r = [], l = [], o = {}, p = (c) => {\n    const f = o[c] == null ? o[c] = 0 : ++o[c];\n    return `${c}:${f}`;\n  };\n  let u = \"\", m = !1, N = !1;\n  for (const c of e) {\n    u += c.value;\n    const f = c.type === \"minusSign\" || c.type === \"plusSign\" ? \"sign\" : c.type;\n    f === \"integer\" ? (m = !0, n.push(...c.value.split(\"\").map((J) => ({ type: f, value: parseInt(J) })))) : f === \"group\" ? n.push({ type: f, value: c.value }) : f === \"decimal\" ? (N = !0, r.push({ type: f, value: c.value, key: p(f) })) : f === \"fraction\" ? r.push(...c.value.split(\"\").map((J) => ({\n      type: f,\n      value: parseInt(J),\n      key: p(f),\n      place: -1 - o[f]\n    }))) : (m || N ? l : i).push({\n      type: f,\n      value: c.value,\n      key: p(f)\n    });\n  }\n  const d = [];\n  for (let c = n.length - 1; c >= 0; c--) {\n    const f = n[c];\n    d.unshift(f.type === \"integer\" ? {\n      ...f,\n      key: p(f.type),\n      place: o[f.type]\n    } : {\n      ...f,\n      key: p(f.type)\n    });\n  }\n  return {\n    pre: i,\n    integer: d,\n    fraction: r,\n    post: l,\n    formatted: u,\n    value: typeof a == \"string\" ? parseFloat(a) : a\n  };\n}\nconst gt = String.raw, wt = F && typeof CSS < \"u\" && CSS.supports(\"animation-timing-function\", \"linear(1,2)\"), yt = F && typeof CSS < \"u\" && CSS.supports(\"line-height\", \"mod(1,1)\"), Q = F ? matchMedia(\"(prefers-reduced-motion: reduce)\") : null, Z = \"--_number-flow-d-opacity\", nt = \"--_number-flow-d-width\", q = \"--_number-flow-dx\", at = \"--_number-flow-d\", _t = (() => {\n  try {\n    return CSS.registerProperty({\n      name: Z,\n      syntax: \"<number>\",\n      inherits: !1,\n      initialValue: \"0\"\n    }), CSS.registerProperty({\n      name: q,\n      syntax: \"<length>\",\n      inherits: !0,\n      initialValue: \"0px\"\n    }), CSS.registerProperty({\n      name: nt,\n      syntax: \"<number>\",\n      inherits: !1,\n      initialValue: \"0\"\n    }), CSS.registerProperty({\n      name: at,\n      syntax: \"<number>\",\n      inherits: !0,\n      initialValue: \"0\"\n    }), !0;\n  } catch {\n    return !1;\n  }\n})(), ht = \"var(--number-flow-char-height, 1em)\", g = \"var(--number-flow-mask-height, 0.25em)\", C = `calc(${g} / 2)`, tt = \"var(--number-flow-mask-width, 0.5em)\", S = `calc(${tt} / var(--scale-x))`, D = \"#000 0, transparent 71%\", et = \"span\", ot = gt`:host{display:inline-flex;align-items:baseline;direction:ltr;white-space:nowrap;position:relative;line-height:${ht} !important;isolation:isolate;}::slotted(${et}){position:absolute;left:0;top:0;color:transparent !important;will-change:unset !important;z-index:-5;}:host > .number,:host > .section{pointer-events:none;user-select:none;}.number,.number__inner{display:inline-flex;align-items:baseline;transform-origin:left top;}:host([data-will-change]) .number,:host([data-will-change]) .number__inner{will-change:transform;}.number{--scale-x:calc(1 + var(${nt}) / var(--width));transform:translateX(var(${q})) scaleX(var(--scale-x));margin:0 calc(-1 * ${tt});position:relative;z-index:-1;overflow:clip;-webkit-mask-image:linear-gradient( to right,transparent 0,#000 ${S},#000 calc(100% - ${S}),transparent ),linear-gradient( to bottom,transparent 0,#000 ${g},#000 calc(100% - ${g}),transparent 100% ),radial-gradient(at bottom right,${D}),radial-gradient(at bottom left,${D}),radial-gradient(at top left,${D}),radial-gradient(at top right,${D});-webkit-mask-size:100% calc(100% - ${g} * 2),calc(100% - ${S} * 2) 100%,${S} ${g},${S} ${g},${S} ${g},${S} ${g};-webkit-mask-position:center,center,top left,top right,bottom right,bottom left;-webkit-mask-repeat:no-repeat;}.number__inner{padding:0 ${tt};transform:scaleX(calc(1 / var(--scale-x))) translateX(calc(-1 * var(${q})));}.section{display:inline-flex;align-items:baseline;padding-bottom:${C};padding-top:${C};position:relative;isolation:isolate;}.section::after{content:'\\200b';display:block;padding:${C} 0;}:host([data-will-change]) .section{will-change:transform;}.section--justify-left{transform-origin:center left;}.section--justify-right{transform-origin:center right;}.section__exiting{position:absolute !important;z-index:-1;}.digit{display:block;position:relative;--c:var(--current) + var(${at});}:host([data-will-change]) .digit,:host([data-will-change]) .digit__num{will-change:transform;}.digit__num{display:block;padding:${C} 0;--offset-raw:mod(10 + var(--n) - mod(var(--c),10),10);--offset:calc(var(--offset-raw) - 10 * round(down,var(--offset-raw) / 5,1));--y:clamp(-100%,var(--offset) * 100%,100%);transform:translateY(var(--y));}.digit__num:not(.is-current){position:absolute;top:0;left:50%;transform:translateX(-50%) translateY(var(--y));}.digit:not(.is-spinning) .digit__num:not(.is-current){display:none;}.symbol{display:inline-flex;align-items:baseline;position:relative;isolation:isolate;padding:${C} 0;}:host([data-will-change]) .symbol{will-change:transform;}.symbol__value{display:block;white-space:pre;}.symbol__exiting{position:absolute;z-index:-1;}.section--justify-left .symbol__exiting{left:0;}.section--justify-right .symbol__exiting{right:0;}.animate-presence{opacity:calc(1 + var(${Z}));}`, vt = F ? HTMLElement : class {\n}, Nt = ({ formatted: a, willChange: t }) => `<${et} style=\"font-kerning: none; display: inline-block; line-height: ${ht}; padding: ${g} 0;${t ? \"will-change: transform\" : \"\"}\">${a}</${et}>`, bt = (a, t) => a != null && t == null ? a : a == null && t != null ? t : a != null && t != null ? Math.max(a, t) : null;\nvar P, B, k, x, $, y, U, L, R, W, H, E, M, V, X, z, j, I, T, A, _, G, it, v, Y, K;\nconst St = yt && wt && _t;\nvar b;\n(function(a) {\n  a[a.UP = 1] = \"UP\", a[a.DOWN = -1] = \"DOWN\", a[a.NONE = 0] = \"NONE\";\n})(b || (b = {}));\nlet O;\nclass kt extends vt {\n  constructor() {\n    super(...arguments), this.transformTiming = this.constructor.defaultProps.transformTiming, this.spinTiming = this.constructor.defaultProps.spinTiming, this.opacityTiming = this.constructor.defaultProps.opacityTiming, this.respectMotionPreference = this.constructor.defaultProps.respectMotionPreference, this.trend = this.constructor.defaultProps.trend, this.continuous = this.constructor.defaultProps.continuous, P.set(this, this.constructor.defaultProps.animated), B.set(this, !1), k.set(this, void 0), x.set(this, void 0), $.set(this, void 0), y.set(this, void 0), U.set(this, void 0), L.set(this, s(this, P, \"f\")), R.set(this, void 0), this.manual = !1, W.set(this, void 0);\n  }\n  get animated() {\n    return s(this, P, \"f\");\n  }\n  set animated(t) {\n    var e;\n    this.animated !== t && (h(this, P, t, \"f\"), (e = this.shadowRoot) == null || e.getAnimations().forEach((i) => i.finish()));\n  }\n  get computedTrend() {\n    return s(this, y, \"f\");\n  }\n  get startingPlace() {\n    return s(this, U, \"f\");\n  }\n  get computedAnimated() {\n    return s(this, L, \"f\");\n  }\n  set parts(t) {\n    if (t == null)\n      return;\n    const { pre: e, integer: i, fraction: n, post: r, value: l } = t;\n    if (s(this, B, \"f\")) {\n      const o = s(this, R, \"f\");\n      if (h(this, R, t, \"f\"), this.trend === !0 ? h(this, y, Math.sign(l - o.value), \"f\") : this.trend === \"increasing\" ? h(this, y, b.UP, \"f\") : this.trend === \"decreasing\" ? h(this, y, b.DOWN, \"f\") : h(this, y, b.NONE, \"f\"), h(this, U, void 0, \"f\"), s(this, y, \"f\") !== b.NONE && this.continuous) {\n        const p = o.integer.concat(o.fraction).filter((d) => d.type === \"integer\" || d.type === \"fraction\"), u = t.integer.concat(t.fraction).filter((d) => d.type === \"integer\" || d.type === \"fraction\"), m = p.find((d) => !u.find((c) => c.place === d.place && c.value === d.value)), N = u.find((d) => !p.find((c) => d.place === c.place && d.value === c.value));\n        h(this, U, bt(m == null ? void 0 : m.place, N == null ? void 0 : N.place), \"f\");\n      }\n      h(this, L, St && s(this, P, \"f\") && (!this.respectMotionPreference || !(Q != null && Q.matches)) && // https://github.com/barvian/number-flow/issues/9\n      ut(this), \"f\"), this.manual || this.willUpdate(), s(this, k, \"f\").update(e), s(this, x, \"f\").update({ integer: i, fraction: n }), s(this, $, \"f\").update(r), this.manual || this.didUpdate();\n    } else {\n      if (h(this, R, t, \"f\"), this.attachShadow({ mode: \"open\" }), typeof CSSStyleSheet < \"u\" && this.shadowRoot.adoptedStyleSheets)\n        O || (O = new CSSStyleSheet(), O.replaceSync(ot)), this.shadowRoot.adoptedStyleSheets = [O];\n      else {\n        const o = document.createElement(\"style\");\n        o.textContent = ot, this.shadowRoot.appendChild(o);\n      }\n      this.shadowRoot.appendChild(w(\"slot\")), h(this, k, new lt(this, e, {\n        inert: !0,\n        ariaHidden: \"true\",\n        justify: \"right\"\n      }), \"f\"), this.shadowRoot.appendChild(s(this, k, \"f\").el), h(this, x, new xt(this, i, n, {\n        inert: !0,\n        ariaHidden: \"true\"\n      }), \"f\"), this.shadowRoot.appendChild(s(this, x, \"f\").el), h(this, $, new lt(this, r, {\n        inert: !0,\n        ariaHidden: \"true\",\n        justify: \"left\"\n      }), \"f\"), this.shadowRoot.appendChild(s(this, $, \"f\").el);\n    }\n    h(this, B, !0, \"f\");\n  }\n  willUpdate() {\n    s(this, k, \"f\").willUpdate(), s(this, x, \"f\").willUpdate(), s(this, $, \"f\").willUpdate();\n  }\n  didUpdate() {\n    if (!s(this, L, \"f\"))\n      return;\n    s(this, W, \"f\") ? s(this, W, \"f\").abort() : this.dispatchEvent(new Event(\"animationsstart\")), s(this, k, \"f\").didUpdate(), s(this, x, \"f\").didUpdate(), s(this, $, \"f\").didUpdate();\n    const t = new AbortController();\n    Promise.all(this.shadowRoot.getAnimations().map((e) => e.finished)).then(() => {\n      t.signal.aborted || (this.dispatchEvent(new Event(\"animationsfinish\")), h(this, W, void 0, \"f\"));\n    }), h(this, W, t, \"f\");\n  }\n}\nP = /* @__PURE__ */ new WeakMap(), B = /* @__PURE__ */ new WeakMap(), k = /* @__PURE__ */ new WeakMap(), x = /* @__PURE__ */ new WeakMap(), $ = /* @__PURE__ */ new WeakMap(), y = /* @__PURE__ */ new WeakMap(), U = /* @__PURE__ */ new WeakMap(), L = /* @__PURE__ */ new WeakMap(), R = /* @__PURE__ */ new WeakMap(), W = /* @__PURE__ */ new WeakMap();\nkt.defaultProps = {\n  transformTiming: {\n    duration: 900,\n    // Make sure to keep this minified:\n    easing: \"linear(0,.005,.019,.039,.066,.096,.129,.165,.202,.24,.278,.316,.354,.39,.426,.461,.494,.526,.557,.586,.614,.64,.665,.689,.711,.731,.751,.769,.786,.802,.817,.831,.844,.856,.867,.877,.887,.896,.904,.912,.919,.925,.931,.937,.942,.947,.951,.955,.959,.962,.965,.968,.971,.973,.976,.978,.98,.981,.983,.984,.986,.987,.988,.989,.99,.991,.992,.992,.993,.994,.994,.995,.995,.996,.996,.9963,.9967,.9969,.9972,.9975,.9977,.9979,.9981,.9982,.9984,.9985,.9987,.9988,.9989,1)\"\n  },\n  spinTiming: void 0,\n  opacityTiming: { duration: 450, easing: \"ease-out\" },\n  animated: !0,\n  trend: !0,\n  continuous: !1,\n  respectMotionPreference: !0\n};\nclass xt {\n  constructor(t, e, i, { className: n, ...r } = {}) {\n    this.flow = t, H.set(this, void 0), E.set(this, void 0), M.set(this, void 0), V.set(this, void 0), X.set(this, void 0), h(this, E, new rt(t, e, {\n      justify: \"right\"\n    }), \"f\"), h(this, M, new rt(t, i, {\n      justify: \"left\"\n    }), \"f\"), h(this, H, w(\"span\", {\n      className: \"number__inner\"\n    }, [s(this, E, \"f\").el, s(this, M, \"f\").el]), \"f\"), this.el = w(\"span\", {\n      ...r,\n      className: `number ${n ?? \"\"}`\n    }, [s(this, H, \"f\")]);\n  }\n  willUpdate() {\n    h(this, V, this.el.offsetWidth, \"f\"), h(this, X, this.el.getBoundingClientRect().left, \"f\"), s(this, E, \"f\").willUpdate(), s(this, M, \"f\").willUpdate();\n  }\n  update({ integer: t, fraction: e }) {\n    s(this, E, \"f\").update(t), s(this, M, \"f\").update(e);\n  }\n  didUpdate() {\n    const t = this.el.getBoundingClientRect();\n    s(this, E, \"f\").didUpdate(), s(this, M, \"f\").didUpdate();\n    const e = s(this, X, \"f\") - t.left, i = this.el.offsetWidth, n = s(this, V, \"f\") - i;\n    this.el.style.setProperty(\"--width\", String(i)), this.el.animate({\n      [q]: [`${e}px`, \"0px\"],\n      [nt]: [n, 0]\n    }, {\n      ...this.flow.transformTiming,\n      composite: \"accumulate\"\n    });\n  }\n}\nH = /* @__PURE__ */ new WeakMap(), E = /* @__PURE__ */ new WeakMap(), M = /* @__PURE__ */ new WeakMap(), V = /* @__PURE__ */ new WeakMap(), X = /* @__PURE__ */ new WeakMap();\nclass ct {\n  constructor(t, e, { justify: i, className: n, ...r }, l) {\n    this.flow = t, this.children = /* @__PURE__ */ new Map(), this.onCharRemove = (p) => () => {\n      this.children.delete(p);\n    }, z.set(this, void 0), this.justify = i;\n    const o = e.map((p) => this.addChar(p).el);\n    this.el = w(\"span\", {\n      ...r,\n      className: `section section--justify-${i} ${n ?? \"\"}`\n    }, l ? l(o) : o);\n  }\n  addChar(t, { startDigitsAtZero: e = !1, ...i } = {}) {\n    const n = t.type === \"integer\" || t.type === \"fraction\" ? new dt(this, t.type, e ? 0 : t.value, t.place, {\n      ...i,\n      onRemove: this.onCharRemove(t.key)\n    }) : new $t(this, t.type, t.value, {\n      ...i,\n      onRemove: this.onCharRemove(t.key)\n    });\n    return this.children.set(t.key, n), n;\n  }\n  unpop(t) {\n    t.el.classList.remove(\"section__exiting\"), t.el.style[this.justify] = \"\";\n  }\n  pop(t) {\n    t.forEach((e) => {\n      e.el.style[this.justify] = `${pt(e.el, this.justify)}px`;\n    }), t.forEach((e) => {\n      e.el.classList.add(\"section__exiting\"), e.present = !1;\n    });\n  }\n  addNewAndUpdateExisting(t) {\n    const e = /* @__PURE__ */ new Map(), i = /* @__PURE__ */ new Map(), n = this.justify === \"left\", r = n ? \"prepend\" : \"append\";\n    if (mt(t, (l) => {\n      let o;\n      this.children.has(l.key) ? (o = this.children.get(l.key), i.set(l, o), this.unpop(o), o.present = !0) : (o = this.addChar(l, { startDigitsAtZero: !0, animateIn: !0 }), e.set(l, o)), this.el[r](o.el);\n    }, { reverse: n }), this.flow.computedAnimated) {\n      const l = this.el.getBoundingClientRect();\n      e.forEach((o) => {\n        o.willUpdate(l);\n      });\n    }\n    e.forEach((l, o) => {\n      l.update(o.value);\n    }), i.forEach((l, o) => {\n      l.update(o.value);\n    });\n  }\n  willUpdate() {\n    const t = this.el.getBoundingClientRect();\n    h(this, z, t[this.justify], \"f\"), this.children.forEach((e) => e.willUpdate(t));\n  }\n  didUpdate() {\n    const t = this.el.getBoundingClientRect();\n    this.children.forEach((n) => n.didUpdate(t));\n    const e = t[this.justify], i = s(this, z, \"f\") - e;\n    this.el.animate({\n      transform: [`translateX(${i}px)`, \"none\"]\n    }, {\n      ...this.flow.transformTiming,\n      composite: \"accumulate\"\n    });\n  }\n}\nz = /* @__PURE__ */ new WeakMap();\nclass rt extends ct {\n  update(t) {\n    const e = /* @__PURE__ */ new Map();\n    this.children.forEach((i, n) => {\n      t.find((r) => r.key === n) || e.set(n, i), this.unpop(i);\n    }), this.addNewAndUpdateExisting(t), e.forEach((i) => {\n      i instanceof dt && i.update(0);\n    }), this.pop(e);\n  }\n}\nclass lt extends ct {\n  update(t) {\n    const e = /* @__PURE__ */ new Map();\n    this.children.forEach((i, n) => {\n      t.find((r) => r.key === n) || e.set(n, i);\n    }), this.pop(e), this.addNewAndUpdateExisting(t);\n  }\n}\nclass st {\n  constructor(t, e, { onRemove: i, animateIn: n = !1 } = {}) {\n    this.flow = t, this.el = e, j.set(this, !0), I.set(this, void 0), T.set(this, () => {\n      var r;\n      this.el.remove(), (r = s(this, I, \"f\")) == null || r.call(this);\n    }), this.el.classList.add(\"animate-presence\"), this.flow.computedAnimated && n && this.el.animate({\n      [Z]: [-0.9999, 0]\n    }, {\n      ...this.flow.opacityTiming,\n      composite: \"accumulate\"\n    }), h(this, I, i, \"f\");\n  }\n  get present() {\n    return s(this, j, \"f\");\n  }\n  set present(t) {\n    if (s(this, j, \"f\") !== t) {\n      if (h(this, j, t, \"f\"), !this.flow.computedAnimated) {\n        t || s(this, T, \"f\").call(this);\n        return;\n      }\n      this.el.style.setProperty(\"--_number-flow-d-opacity\", t ? \"0\" : \"-.999\"), this.el.animate({\n        [Z]: t ? [-0.9999, 0] : [0.999, 0]\n      }, {\n        ...this.flow.opacityTiming,\n        composite: \"accumulate\"\n      }), t ? this.flow.removeEventListener(\"animationsfinish\", s(this, T, \"f\")) : this.flow.addEventListener(\"animationsfinish\", s(this, T, \"f\"), {\n        once: !0\n      });\n    }\n  }\n}\nj = /* @__PURE__ */ new WeakMap(), I = /* @__PURE__ */ new WeakMap(), T = /* @__PURE__ */ new WeakMap();\nclass ft extends st {\n  constructor(t, e, i, n) {\n    super(t.flow, i, n), this.section = t, this.value = e, this.el = i;\n  }\n}\nclass dt extends ft {\n  constructor(t, e, i, n, r) {\n    const l = Array.from({ length: 10 }).map((p, u) => {\n      const m = w(\"span\", { className: `digit__num${u === i ? \" is-current\" : \"\"}` }, [document.createTextNode(String(u))]);\n      return m.style.setProperty(\"--n\", String(u)), m;\n    }), o = w(\"span\", {\n      className: \"digit\"\n    }, l);\n    o.style.setProperty(\"--current\", String(i)), super(t, i, o, r), this.place = n, A.set(this, void 0), _.set(this, void 0), G.set(this, void 0), it.set(this, () => {\n      this.el.classList.remove(\"is-spinning\");\n    }), h(this, A, l, \"f\");\n  }\n  willUpdate(t) {\n    const e = this.el.getBoundingClientRect();\n    h(this, _, this.value, \"f\");\n    const i = e[this.section.justify] - t[this.section.justify], n = e.width / 2;\n    h(this, G, this.section.justify === \"left\" ? i + n : i - n, \"f\");\n  }\n  update(t) {\n    var e, i;\n    (e = s(this, A, \"f\")[this.value]) == null || e.classList.remove(\"is-current\"), this.el.style.setProperty(\"--current\", String(t)), (i = s(this, A, \"f\")[t]) == null || i.classList.add(\"is-current\"), this.value = t;\n  }\n  didUpdate(t) {\n    const e = this.el.getBoundingClientRect(), i = e[this.section.justify] - t[this.section.justify], n = e.width / 2, r = this.section.justify === \"left\" ? i + n : i - n;\n    this.el.animate({\n      transform: [`translateX(${s(this, G, \"f\") - r}px)`, \"none\"]\n    }, {\n      ...this.flow.transformTiming,\n      composite: \"accumulate\"\n    });\n    const l = this.diff;\n    l && (this.el.classList.add(\"is-spinning\"), this.el.animate({\n      [at]: [-l, 0]\n    }, {\n      ...this.flow.spinTiming ?? this.flow.transformTiming,\n      composite: \"accumulate\"\n    }), this.flow.addEventListener(\"animationsfinish\", s(this, it, \"f\"), { once: !0 }));\n  }\n  get diff() {\n    let t = this.flow.computedTrend;\n    const e = this.value - s(this, _, \"f\");\n    return !e && this.flow.startingPlace != null && this.flow.startingPlace >= this.place ? 10 * t : (t || (t = Math.sign(e)), t === b.DOWN && this.value > s(this, _, \"f\") ? this.value - 10 - s(this, _, \"f\") : t === b.UP && this.value < s(this, _, \"f\") ? 10 - s(this, _, \"f\") + this.value : e);\n  }\n}\nA = /* @__PURE__ */ new WeakMap(), _ = /* @__PURE__ */ new WeakMap(), G = /* @__PURE__ */ new WeakMap(), it = /* @__PURE__ */ new WeakMap();\nclass $t extends ft {\n  constructor(t, e, i, n) {\n    const r = w(\"span\", {\n      className: \"symbol__value\",\n      textContent: i\n    });\n    super(t, i, w(\"span\", {\n      className: \"symbol\"\n    }, [r]), n), this.type = e, v.set(this, /* @__PURE__ */ new Map()), Y.set(this, void 0), K.set(this, (l) => () => {\n      s(this, v, \"f\").delete(l);\n    }), s(this, v, \"f\").set(i, new st(this.flow, r, {\n      onRemove: s(this, K, \"f\").call(this, i)\n    }));\n  }\n  willUpdate(t) {\n    if (this.type === \"decimal\")\n      return;\n    const e = this.el.getBoundingClientRect();\n    h(this, Y, e[this.section.justify] - t[this.section.justify], \"f\");\n  }\n  update(t) {\n    if (this.value !== t) {\n      const e = s(this, v, \"f\").get(this.value);\n      if (e.present = !1, e.el.classList.add(\"symbol__exiting\"), s(this, v, \"f\").has(t)) {\n        const i = s(this, v, \"f\").get(t);\n        i.present = !0, i.el.classList.remove(\"symbol__exiting\");\n      } else {\n        const i = w(\"span\", {\n          className: \"symbol__value\",\n          textContent: t\n        });\n        this.el.appendChild(i), s(this, v, \"f\").set(t, new st(this.flow, i, {\n          animateIn: !0,\n          onRemove: s(this, K, \"f\").call(this, t)\n        }));\n      }\n    }\n    this.value = t;\n  }\n  didUpdate(t) {\n    if (this.type === \"decimal\")\n      return;\n    const i = this.el.getBoundingClientRect()[this.section.justify] - t[this.section.justify];\n    this.el.animate({\n      transform: [`translateX(${s(this, Y, \"f\") - i}px)`, \"none\"]\n    }, { ...this.flow.transformTiming, composite: \"accumulate\" });\n  }\n}\nv = /* @__PURE__ */ new WeakMap(), Y = /* @__PURE__ */ new WeakMap(), K = /* @__PURE__ */ new WeakMap();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/number-flow/dist/index.mjs\n");

/***/ })

};
;